//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputActions/RtsInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RtsInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RtsInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RtsInputActions"",
    ""maps"": [
        {
            ""name"": ""Hotkeys"",
            ""id"": ""9e12ac19-436a-47a4-9023-8bebeeb80d35"",
            ""actions"": [
                {
                    ""name"": ""InteractToGroup"",
                    ""type"": ""Value"",
                    ""id"": ""b66cd365-7524-4633-829f-03667993408c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ShiftState"",
                    ""type"": ""Button"",
                    ""id"": ""33039073-d9d5-4819-ab5f-17f74bebc092"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ControlState"",
                    ""type"": ""Button"",
                    ""id"": ""82fecd51-a04b-4ce0-bce5-88ab16d575ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1cc39a9d-8541-4d00-9928-4e2c871b6ea8"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": ""Scale"",
                    ""groups"": """",
                    ""action"": ""InteractToGroup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8d76138-aeb0-42ba-ab70-97fa8a6fde77"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=2)"",
                    ""groups"": """",
                    ""action"": ""InteractToGroup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f46cb43f-ee14-483f-85be-727cdbced070"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=3)"",
                    ""groups"": """",
                    ""action"": ""InteractToGroup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5aaa55d4-0eb5-4994-ac5f-c4c4631df52d"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=4)"",
                    ""groups"": """",
                    ""action"": ""InteractToGroup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8fc82188-b7d1-4a67-a076-065ef5d2f8e5"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=5)"",
                    ""groups"": """",
                    ""action"": ""InteractToGroup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb88897f-3a30-4ef9-872a-dace96edd1f6"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=6)"",
                    ""groups"": """",
                    ""action"": ""InteractToGroup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3276b67a-9be0-4128-95a6-c9e33a75d21b"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=7)"",
                    ""groups"": """",
                    ""action"": ""InteractToGroup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""740c18ea-603d-4623-b51c-ecca04e0ce2d"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=8)"",
                    ""groups"": """",
                    ""action"": ""InteractToGroup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fae1d088-071f-4f91-94b0-d338fb06e201"",
                    ""path"": ""<Keyboard>/9"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=9)"",
                    ""groups"": """",
                    ""action"": ""InteractToGroup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""839d0f25-d4db-4298-be85-d8545b4cc2b5"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShiftState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""394b45e1-3f6d-477d-a159-c5d8c3895416"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControlState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""41230f96-efb3-4af3-872f-c27c7f3b9081"",
            ""actions"": [
                {
                    ""name"": ""Pan"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2434025a-8bfb-42f9-a95e-ace4723912b6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""6a06b00b-2d1f-4a1a-97f0-3c092df48c63"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AltState"",
                    ""type"": ""Button"",
                    ""id"": ""dd24b31e-c6eb-4560-b157-b801afb1c5fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fe9645ba-a142-4f53-b6f2-ca770f6c039c"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ff397edf-b0d3-460e-9bf6-c3257ba09295"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b295737c-d211-468f-aa76-5773d5bf6742"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""41913688-6b05-4148-8033-825c0210ca0a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3fb76139-e878-4064-9212-52fe948bf3af"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""473e19e1-e734-4976-8441-af5815a99c47"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b442720a-4fdc-4450-b9c6-f3288ade5d8a"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AltState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Map"",
            ""id"": ""4383e8bd-d797-4141-8f1c-cb49dd05a4be"",
            ""actions"": [
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""7c924dd8-46b3-4683-8de0-475c8c3ff8e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap(pressPoint=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""3aa29851-920e-47fe-bc83-37a402da7aab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BeginDrag"",
                    ""type"": ""Button"",
                    ""id"": ""ddeb5d47-9d62-46c1-b53e-bebfb6ff7426"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseMove"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1d2a0b5a-9554-4734-a361-8ff9c06879f2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShiftMod"",
                    ""type"": ""Button"",
                    ""id"": ""b83ea040-4b3f-423c-afa3-92dddb3be034"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""88150707-cee4-4013-af00-ac6d5cb61451"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1e3edfca-e0cf-4659-a50a-3cf304381ae5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BeginDrag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2246c73c-c22a-4ea2-b3be-cae8d54d7272"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc751bbb-198e-430f-a8b7-739191980e1d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38ff9a77-2441-43d5-8c2a-c1273ad06fd9"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9818806b-0545-446f-84ae-f39b5aff26f3"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShiftMod"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc5c2094-6b79-4b4f-a31e-1b10545ae7d0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Hotkeys
        m_Hotkeys = asset.FindActionMap("Hotkeys", throwIfNotFound: true);
        m_Hotkeys_InteractToGroup = m_Hotkeys.FindAction("InteractToGroup", throwIfNotFound: true);
        m_Hotkeys_ShiftState = m_Hotkeys.FindAction("ShiftState", throwIfNotFound: true);
        m_Hotkeys_ControlState = m_Hotkeys.FindAction("ControlState", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Pan = m_Camera.FindAction("Pan", throwIfNotFound: true);
        m_Camera_Move = m_Camera.FindAction("Move", throwIfNotFound: true);
        m_Camera_AltState = m_Camera.FindAction("AltState", throwIfNotFound: true);
        // Map
        m_Map = asset.FindActionMap("Map", throwIfNotFound: true);
        m_Map_LeftClick = m_Map.FindAction("LeftClick", throwIfNotFound: true);
        m_Map_RightClick = m_Map.FindAction("RightClick", throwIfNotFound: true);
        m_Map_BeginDrag = m_Map.FindAction("BeginDrag", throwIfNotFound: true);
        m_Map_MouseMove = m_Map.FindAction("MouseMove", throwIfNotFound: true);
        m_Map_ShiftMod = m_Map.FindAction("ShiftMod", throwIfNotFound: true);
        m_Map_Drop = m_Map.FindAction("Drop", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Hotkeys
    private readonly InputActionMap m_Hotkeys;
    private IHotkeysActions m_HotkeysActionsCallbackInterface;
    private readonly InputAction m_Hotkeys_InteractToGroup;
    private readonly InputAction m_Hotkeys_ShiftState;
    private readonly InputAction m_Hotkeys_ControlState;
    public struct HotkeysActions
    {
        private @RtsInputActions m_Wrapper;
        public HotkeysActions(@RtsInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @InteractToGroup => m_Wrapper.m_Hotkeys_InteractToGroup;
        public InputAction @ShiftState => m_Wrapper.m_Hotkeys_ShiftState;
        public InputAction @ControlState => m_Wrapper.m_Hotkeys_ControlState;
        public InputActionMap Get() { return m_Wrapper.m_Hotkeys; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HotkeysActions set) { return set.Get(); }
        public void SetCallbacks(IHotkeysActions instance)
        {
            if (m_Wrapper.m_HotkeysActionsCallbackInterface != null)
            {
                @InteractToGroup.started -= m_Wrapper.m_HotkeysActionsCallbackInterface.OnInteractToGroup;
                @InteractToGroup.performed -= m_Wrapper.m_HotkeysActionsCallbackInterface.OnInteractToGroup;
                @InteractToGroup.canceled -= m_Wrapper.m_HotkeysActionsCallbackInterface.OnInteractToGroup;
                @ShiftState.started -= m_Wrapper.m_HotkeysActionsCallbackInterface.OnShiftState;
                @ShiftState.performed -= m_Wrapper.m_HotkeysActionsCallbackInterface.OnShiftState;
                @ShiftState.canceled -= m_Wrapper.m_HotkeysActionsCallbackInterface.OnShiftState;
                @ControlState.started -= m_Wrapper.m_HotkeysActionsCallbackInterface.OnControlState;
                @ControlState.performed -= m_Wrapper.m_HotkeysActionsCallbackInterface.OnControlState;
                @ControlState.canceled -= m_Wrapper.m_HotkeysActionsCallbackInterface.OnControlState;
            }
            m_Wrapper.m_HotkeysActionsCallbackInterface = instance;
            if (instance != null)
            {
                @InteractToGroup.started += instance.OnInteractToGroup;
                @InteractToGroup.performed += instance.OnInteractToGroup;
                @InteractToGroup.canceled += instance.OnInteractToGroup;
                @ShiftState.started += instance.OnShiftState;
                @ShiftState.performed += instance.OnShiftState;
                @ShiftState.canceled += instance.OnShiftState;
                @ControlState.started += instance.OnControlState;
                @ControlState.performed += instance.OnControlState;
                @ControlState.canceled += instance.OnControlState;
            }
        }
    }
    public HotkeysActions @Hotkeys => new HotkeysActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_Camera_Pan;
    private readonly InputAction m_Camera_Move;
    private readonly InputAction m_Camera_AltState;
    public struct CameraActions
    {
        private @RtsInputActions m_Wrapper;
        public CameraActions(@RtsInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pan => m_Wrapper.m_Camera_Pan;
        public InputAction @Move => m_Wrapper.m_Camera_Move;
        public InputAction @AltState => m_Wrapper.m_Camera_AltState;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @Pan.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnPan;
                @Pan.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnPan;
                @Pan.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnPan;
                @Move.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMove;
                @AltState.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnAltState;
                @AltState.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnAltState;
                @AltState.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnAltState;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pan.started += instance.OnPan;
                @Pan.performed += instance.OnPan;
                @Pan.canceled += instance.OnPan;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @AltState.started += instance.OnAltState;
                @AltState.performed += instance.OnAltState;
                @AltState.canceled += instance.OnAltState;
            }
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // Map
    private readonly InputActionMap m_Map;
    private IMapActions m_MapActionsCallbackInterface;
    private readonly InputAction m_Map_LeftClick;
    private readonly InputAction m_Map_RightClick;
    private readonly InputAction m_Map_BeginDrag;
    private readonly InputAction m_Map_MouseMove;
    private readonly InputAction m_Map_ShiftMod;
    private readonly InputAction m_Map_Drop;
    public struct MapActions
    {
        private @RtsInputActions m_Wrapper;
        public MapActions(@RtsInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftClick => m_Wrapper.m_Map_LeftClick;
        public InputAction @RightClick => m_Wrapper.m_Map_RightClick;
        public InputAction @BeginDrag => m_Wrapper.m_Map_BeginDrag;
        public InputAction @MouseMove => m_Wrapper.m_Map_MouseMove;
        public InputAction @ShiftMod => m_Wrapper.m_Map_ShiftMod;
        public InputAction @Drop => m_Wrapper.m_Map_Drop;
        public InputActionMap Get() { return m_Wrapper.m_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapActions set) { return set.Get(); }
        public void SetCallbacks(IMapActions instance)
        {
            if (m_Wrapper.m_MapActionsCallbackInterface != null)
            {
                @LeftClick.started -= m_Wrapper.m_MapActionsCallbackInterface.OnLeftClick;
                @LeftClick.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnLeftClick;
                @LeftClick.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnLeftClick;
                @RightClick.started -= m_Wrapper.m_MapActionsCallbackInterface.OnRightClick;
                @RightClick.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnRightClick;
                @RightClick.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnRightClick;
                @BeginDrag.started -= m_Wrapper.m_MapActionsCallbackInterface.OnBeginDrag;
                @BeginDrag.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnBeginDrag;
                @BeginDrag.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnBeginDrag;
                @MouseMove.started -= m_Wrapper.m_MapActionsCallbackInterface.OnMouseMove;
                @MouseMove.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnMouseMove;
                @MouseMove.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnMouseMove;
                @ShiftMod.started -= m_Wrapper.m_MapActionsCallbackInterface.OnShiftMod;
                @ShiftMod.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnShiftMod;
                @ShiftMod.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnShiftMod;
                @Drop.started -= m_Wrapper.m_MapActionsCallbackInterface.OnDrop;
                @Drop.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnDrop;
                @Drop.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnDrop;
            }
            m_Wrapper.m_MapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @BeginDrag.started += instance.OnBeginDrag;
                @BeginDrag.performed += instance.OnBeginDrag;
                @BeginDrag.canceled += instance.OnBeginDrag;
                @MouseMove.started += instance.OnMouseMove;
                @MouseMove.performed += instance.OnMouseMove;
                @MouseMove.canceled += instance.OnMouseMove;
                @ShiftMod.started += instance.OnShiftMod;
                @ShiftMod.performed += instance.OnShiftMod;
                @ShiftMod.canceled += instance.OnShiftMod;
                @Drop.started += instance.OnDrop;
                @Drop.performed += instance.OnDrop;
                @Drop.canceled += instance.OnDrop;
            }
        }
    }
    public MapActions @Map => new MapActions(this);
    public interface IHotkeysActions
    {
        void OnInteractToGroup(InputAction.CallbackContext context);
        void OnShiftState(InputAction.CallbackContext context);
        void OnControlState(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnPan(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnAltState(InputAction.CallbackContext context);
    }
    public interface IMapActions
    {
        void OnLeftClick(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
        void OnBeginDrag(InputAction.CallbackContext context);
        void OnMouseMove(InputAction.CallbackContext context);
        void OnShiftMod(InputAction.CallbackContext context);
        void OnDrop(InputAction.CallbackContext context);
    }
}
